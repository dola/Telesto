

package ch.ethz.syslab.telesto.protocol;

import java.nio.ByteBuffer;

import ch.ethz.syslab.telesto.model.Queue;
import ch.ethz.syslab.telesto.protocol.handler.PacketProcessingException;
import ch.ethz.syslab.telesto.protocol.handler.ProtocolHandler;



/* 
 * Do not edit this file! 
 * 
 * Edit the template at tools/protocol/telesto/templates/packet.java instead.
 */
public class GetActiveQueuesResponsePacket extends Packet {
    public Queue[] queues;

    public GetActiveQueuesResponsePacket() {
    }

    public GetActiveQueuesResponsePacket(Queue[] queues) {
        this.queues = queues;
    }
    
    public GetActiveQueuesResponsePacket(int packetId, Queue[] queues) {
        this.packetId = packetId;
        this.queues = queues;
    }

    @Override
    public byte methodId() {
        return 44;
    }

    @Override
    public void emit(ByteBuffer buffer) {
        int lengthIndex = buffer.position();
        buffer.position(lengthIndex + 2);
        buffer.put(methodId());
        buffer.putInt(packetId);
        buffer.putInt(queues.length);
        for (int i = 0; i < queues.length; i++) {
            putQueue(buffer, queues[i]);
        }
        buffer.putShort(lengthIndex, (short) (buffer.position() - lengthIndex - 2));
    }

    @Override
    public void parse(ByteBuffer buffer) {
        packetId = buffer.getInt();
        queues = new Queue[buffer.getInt()];
        for (int i = 0; i < queues.length; i++) {
            queues[i] = getQueue(buffer);
        }
    }

    @Override
    public GetActiveQueuesResponsePacket newInstance() {
        return new GetActiveQueuesResponsePacket();
    }
    
    public Packet getHandled(ProtocolHandler handler) throws PacketProcessingException {
        return handler.handle((GetActiveQueuesResponsePacket) this);
    }

    public String toString() {
        return "GetActiveQueuesResponsePacket";
    }
}