package ch.ethz.syslab.telesto.protocol.handler;

import ch.ethz.syslab.telesto.protocol.*;
import ch.ethz.syslab.telesto.util.ErrorType;

/* 
 * Do not edit this file! 
 * 
 * Edit the template at tools/protocol/telesto/templates/handler.java instead.
 */
public abstract class ProtocolHandler {
    public Packet handle(PingPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(PongPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(SuccessPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(ErrorPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(RegisterClientPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(RegisterClientResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(IdentifyClientPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(IdentifyClientResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(CreateQueuePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(CreateQueueResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(DeleteQueuePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetQueueIdPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetQueueIdResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetQueueNamePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetQueueNameResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetQueuesPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetQueuesResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetActiveQueuesPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetActiveQueuesResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetMessagesPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(GetMessagesResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(PutMessagePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(ReadMessagePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(ReadMessageResponsePacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(ComplexTestPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(MessageTestPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    public Packet handle(QueueTestPacket packet) throws PacketProcessingException {
        unhandledPacket(packet);
        return null;
    }
    
    private void unhandledPacket(Packet packet) throws PacketProcessingException {
        throw new PacketProcessingException(ErrorType.UnexpectedPacket, "Received unexpected packet " + packet.toString());
    }
}