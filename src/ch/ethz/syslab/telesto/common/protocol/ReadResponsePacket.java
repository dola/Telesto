

package ch.ethz.syslab.telesto.common.protocol;

import java.nio.ByteBuffer;

import ch.ethz.syslab.telesto.common.protocol.handler.PacketProcessingException;
import ch.ethz.syslab.telesto.common.protocol.handler.ProtocolHandler;



/* 
 * Do not edit this file! 
 * 
 * Edit the template at tools/protocol/telesto/templates/packet.java instead.
 */
public class ReadResponsePacket extends Packet {
    public int queueId;
    public int context;

    public ReadResponsePacket() {
    }

    public ReadResponsePacket(int queueId, int context) {
        this.queueId = queueId;
        this.context = context;
    }
    
    public ReadResponsePacket(int packetId, int queueId, int context) {
        this.packetId = packetId;
        this.queueId = queueId;
        this.context = context;
    }

    @Override
    public byte methodId() {
        return 53;
    }

    @Override
    public void emit(ByteBuffer buffer) {
        int lengthIndex = buffer.position();
        buffer.position(lengthIndex + 2);
        buffer.put(methodId());
        buffer.putInt(packetId);
        buffer.putInt(queueId);
        buffer.putInt(context);
        buffer.putShort(lengthIndex, (short) (buffer.position() - lengthIndex - 2));
    }

    @Override
    public void parse(ByteBuffer buffer) {
        packetId = buffer.getInt();
        queueId = buffer.getInt();
        context = buffer.getInt();
    }

    @Override
    public ReadResponsePacket newInstance() {
        return new ReadResponsePacket();
    }
    
    public Packet getHandled(ProtocolHandler handler) throws PacketProcessingException {
        return handler.handle((ReadResponsePacket) this);
    }

    public String toString() {
        return "ReadResponsePacket";
    }
}